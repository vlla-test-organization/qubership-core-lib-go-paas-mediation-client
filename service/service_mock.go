// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/vlla-test-organization/qubership-core-lib-go-paas-mediation-client/v8/entity"
	filter "github.com/vlla-test-organization/qubership-core-lib-go-paas-mediation-client/v8/filter"
	watch "github.com/vlla-test-organization/qubership-core-lib-go-paas-mediation-client/v8/watch"
)

// MockRouteInterface is a mock of RouteInterface interface.
type MockRouteInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRouteInterfaceMockRecorder
}

// MockRouteInterfaceMockRecorder is the mock recorder for MockRouteInterface.
type MockRouteInterfaceMockRecorder struct {
	mock *MockRouteInterface
}

// NewMockRouteInterface creates a new mock instance.
func NewMockRouteInterface(ctrl *gomock.Controller) *MockRouteInterface {
	mock := &MockRouteInterface{ctrl: ctrl}
	mock.recorder = &MockRouteInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteInterface) EXPECT() *MockRouteInterfaceMockRecorder {
	return m.recorder
}

// CreateRoute mocks base method.
func (m *MockRouteInterface) CreateRoute(ctx context.Context, request *entity.Route, namespace string) (*entity.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoute", ctx, request, namespace)
	ret0, _ := ret[0].(*entity.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoute indicates an expected call of CreateRoute.
func (mr *MockRouteInterfaceMockRecorder) CreateRoute(ctx, request, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoute", reflect.TypeOf((*MockRouteInterface)(nil).CreateRoute), ctx, request, namespace)
}

// DeleteRoute mocks base method.
func (m *MockRouteInterface) DeleteRoute(ctx context.Context, routeName, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoute", ctx, routeName, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoute indicates an expected call of DeleteRoute.
func (mr *MockRouteInterfaceMockRecorder) DeleteRoute(ctx, routeName, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoute", reflect.TypeOf((*MockRouteInterface)(nil).DeleteRoute), ctx, routeName, namespace)
}

// GetBadRouteLists mocks base method.
func (m *MockRouteInterface) GetBadRouteLists(ctx context.Context) (map[string][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBadRouteLists", ctx)
	ret0, _ := ret[0].(map[string][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBadRouteLists indicates an expected call of GetBadRouteLists.
func (mr *MockRouteInterfaceMockRecorder) GetBadRouteLists(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBadRouteLists", reflect.TypeOf((*MockRouteInterface)(nil).GetBadRouteLists), ctx)
}

// GetRoute mocks base method.
func (m *MockRouteInterface) GetRoute(ctx context.Context, resourceName, namespace string) (*entity.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoute", ctx, resourceName, namespace)
	ret0, _ := ret[0].(*entity.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoute indicates an expected call of GetRoute.
func (mr *MockRouteInterfaceMockRecorder) GetRoute(ctx, resourceName, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoute", reflect.TypeOf((*MockRouteInterface)(nil).GetRoute), ctx, resourceName, namespace)
}

// GetRouteList mocks base method.
func (m *MockRouteInterface) GetRouteList(ctx context.Context, namespace string, filter filter.Meta) ([]entity.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouteList", ctx, namespace, filter)
	ret0, _ := ret[0].([]entity.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouteList indicates an expected call of GetRouteList.
func (mr *MockRouteInterfaceMockRecorder) GetRouteList(ctx, namespace, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouteList", reflect.TypeOf((*MockRouteInterface)(nil).GetRouteList), ctx, namespace, filter)
}

// UpdateOrCreateRoute mocks base method.
func (m *MockRouteInterface) UpdateOrCreateRoute(ctx context.Context, request *entity.Route, namespace string) (*entity.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrCreateRoute", ctx, request, namespace)
	ret0, _ := ret[0].(*entity.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrCreateRoute indicates an expected call of UpdateOrCreateRoute.
func (mr *MockRouteInterfaceMockRecorder) UpdateOrCreateRoute(ctx, request, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrCreateRoute", reflect.TypeOf((*MockRouteInterface)(nil).UpdateOrCreateRoute), ctx, request, namespace)
}

// WatchRoutes mocks base method.
func (m *MockRouteInterface) WatchRoutes(ctx context.Context, namespace string, filter filter.Meta) (*watch.Handler, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchRoutes", ctx, namespace, filter)
	ret0, _ := ret[0].(*watch.Handler)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchRoutes indicates an expected call of WatchRoutes.
func (mr *MockRouteInterfaceMockRecorder) WatchRoutes(ctx, namespace, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchRoutes", reflect.TypeOf((*MockRouteInterface)(nil).WatchRoutes), ctx, namespace, filter)
}

// MockConfigMapInterface is a mock of ConfigMapInterface interface.
type MockConfigMapInterface struct {
	ctrl     *gomock.Controller
	recorder *MockConfigMapInterfaceMockRecorder
}

// MockConfigMapInterfaceMockRecorder is the mock recorder for MockConfigMapInterface.
type MockConfigMapInterfaceMockRecorder struct {
	mock *MockConfigMapInterface
}

// NewMockConfigMapInterface creates a new mock instance.
func NewMockConfigMapInterface(ctrl *gomock.Controller) *MockConfigMapInterface {
	mock := &MockConfigMapInterface{ctrl: ctrl}
	mock.recorder = &MockConfigMapInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigMapInterface) EXPECT() *MockConfigMapInterfaceMockRecorder {
	return m.recorder
}

// CreateConfigMap mocks base method.
func (m *MockConfigMapInterface) CreateConfigMap(ctx context.Context, configMap *entity.ConfigMap, namespace string) (*entity.ConfigMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConfigMap", ctx, configMap, namespace)
	ret0, _ := ret[0].(*entity.ConfigMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConfigMap indicates an expected call of CreateConfigMap.
func (mr *MockConfigMapInterfaceMockRecorder) CreateConfigMap(ctx, configMap, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfigMap", reflect.TypeOf((*MockConfigMapInterface)(nil).CreateConfigMap), ctx, configMap, namespace)
}

// DeleteConfigMap mocks base method.
func (m *MockConfigMapInterface) DeleteConfigMap(ctx context.Context, resourceName, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConfigMap", ctx, resourceName, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteConfigMap indicates an expected call of DeleteConfigMap.
func (mr *MockConfigMapInterfaceMockRecorder) DeleteConfigMap(ctx, resourceName, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfigMap", reflect.TypeOf((*MockConfigMapInterface)(nil).DeleteConfigMap), ctx, resourceName, namespace)
}

// GetConfigMap mocks base method.
func (m *MockConfigMapInterface) GetConfigMap(ctx context.Context, resourceName, namespace string) (*entity.ConfigMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigMap", ctx, resourceName, namespace)
	ret0, _ := ret[0].(*entity.ConfigMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigMap indicates an expected call of GetConfigMap.
func (mr *MockConfigMapInterfaceMockRecorder) GetConfigMap(ctx, resourceName, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigMap", reflect.TypeOf((*MockConfigMapInterface)(nil).GetConfigMap), ctx, resourceName, namespace)
}

// GetConfigMapList mocks base method.
func (m *MockConfigMapInterface) GetConfigMapList(ctx context.Context, namespace string, filter filter.Meta) ([]entity.ConfigMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigMapList", ctx, namespace, filter)
	ret0, _ := ret[0].([]entity.ConfigMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigMapList indicates an expected call of GetConfigMapList.
func (mr *MockConfigMapInterfaceMockRecorder) GetConfigMapList(ctx, namespace, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigMapList", reflect.TypeOf((*MockConfigMapInterface)(nil).GetConfigMapList), ctx, namespace, filter)
}

// UpdateOrCreateConfigMap mocks base method.
func (m *MockConfigMapInterface) UpdateOrCreateConfigMap(ctx context.Context, configMap *entity.ConfigMap, namespace string) (*entity.ConfigMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrCreateConfigMap", ctx, configMap, namespace)
	ret0, _ := ret[0].(*entity.ConfigMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrCreateConfigMap indicates an expected call of UpdateOrCreateConfigMap.
func (mr *MockConfigMapInterfaceMockRecorder) UpdateOrCreateConfigMap(ctx, configMap, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrCreateConfigMap", reflect.TypeOf((*MockConfigMapInterface)(nil).UpdateOrCreateConfigMap), ctx, configMap, namespace)
}

// WatchConfigMaps mocks base method.
func (m *MockConfigMapInterface) WatchConfigMaps(ctx context.Context, namespace string, filter filter.Meta) (*watch.Handler, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchConfigMaps", ctx, namespace, filter)
	ret0, _ := ret[0].(*watch.Handler)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchConfigMaps indicates an expected call of WatchConfigMaps.
func (mr *MockConfigMapInterfaceMockRecorder) WatchConfigMaps(ctx, namespace, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchConfigMaps", reflect.TypeOf((*MockConfigMapInterface)(nil).WatchConfigMaps), ctx, namespace, filter)
}

// MockPodInterface is a mock of PodInterface interface.
type MockPodInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPodInterfaceMockRecorder
}

// MockPodInterfaceMockRecorder is the mock recorder for MockPodInterface.
type MockPodInterfaceMockRecorder struct {
	mock *MockPodInterface
}

// NewMockPodInterface creates a new mock instance.
func NewMockPodInterface(ctrl *gomock.Controller) *MockPodInterface {
	mock := &MockPodInterface{ctrl: ctrl}
	mock.recorder = &MockPodInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPodInterface) EXPECT() *MockPodInterfaceMockRecorder {
	return m.recorder
}

// GetPod mocks base method.
func (m *MockPodInterface) GetPod(ctx context.Context, resourceName, namespace string) (*entity.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPod", ctx, resourceName, namespace)
	ret0, _ := ret[0].(*entity.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPod indicates an expected call of GetPod.
func (mr *MockPodInterfaceMockRecorder) GetPod(ctx, resourceName, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPod", reflect.TypeOf((*MockPodInterface)(nil).GetPod), ctx, resourceName, namespace)
}

// GetPodList mocks base method.
func (m *MockPodInterface) GetPodList(ctx context.Context, namespace string, filter filter.Meta) ([]entity.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodList", ctx, namespace, filter)
	ret0, _ := ret[0].([]entity.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPodList indicates an expected call of GetPodList.
func (mr *MockPodInterfaceMockRecorder) GetPodList(ctx, namespace, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodList", reflect.TypeOf((*MockPodInterface)(nil).GetPodList), ctx, namespace, filter)
}

// RolloutDeployment mocks base method.
func (m *MockPodInterface) RolloutDeployment(ctx context.Context, deploymentName, namespace string) (*entity.DeploymentRollout, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RolloutDeployment", ctx, deploymentName, namespace)
	ret0, _ := ret[0].(*entity.DeploymentRollout)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RolloutDeployment indicates an expected call of RolloutDeployment.
func (mr *MockPodInterfaceMockRecorder) RolloutDeployment(ctx, deploymentName, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RolloutDeployment", reflect.TypeOf((*MockPodInterface)(nil).RolloutDeployment), ctx, deploymentName, namespace)
}

// RolloutDeployments mocks base method.
func (m *MockPodInterface) RolloutDeployments(ctx context.Context, namespace string, deploymentNames []string) (*entity.DeploymentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RolloutDeployments", ctx, namespace, deploymentNames)
	ret0, _ := ret[0].(*entity.DeploymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RolloutDeployments indicates an expected call of RolloutDeployments.
func (mr *MockPodInterfaceMockRecorder) RolloutDeployments(ctx, namespace, deploymentNames interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RolloutDeployments", reflect.TypeOf((*MockPodInterface)(nil).RolloutDeployments), ctx, namespace, deploymentNames)
}

// RolloutDeploymentsInParallel mocks base method.
func (m *MockPodInterface) RolloutDeploymentsInParallel(ctx context.Context, namespace string, deploymentNames []string) (*entity.DeploymentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RolloutDeploymentsInParallel", ctx, namespace, deploymentNames)
	ret0, _ := ret[0].(*entity.DeploymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RolloutDeploymentsInParallel indicates an expected call of RolloutDeploymentsInParallel.
func (mr *MockPodInterfaceMockRecorder) RolloutDeploymentsInParallel(ctx, namespace, deploymentNames interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RolloutDeploymentsInParallel", reflect.TypeOf((*MockPodInterface)(nil).RolloutDeploymentsInParallel), ctx, namespace, deploymentNames)
}

// WatchPodsRestarting mocks base method.
func (m *MockPodInterface) WatchPodsRestarting(ctx context.Context, namespace string, filter filter.Meta, deploymentsMap map[string][]string) (*watch.Handler, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchPodsRestarting", ctx, namespace, filter, deploymentsMap)
	ret0, _ := ret[0].(*watch.Handler)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchPodsRestarting indicates an expected call of WatchPodsRestarting.
func (mr *MockPodInterfaceMockRecorder) WatchPodsRestarting(ctx, namespace, filter, deploymentsMap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchPodsRestarting", reflect.TypeOf((*MockPodInterface)(nil).WatchPodsRestarting), ctx, namespace, filter, deploymentsMap)
}

// MockServiceInterface is a mock of ServiceInterface interface.
type MockServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockServiceInterfaceMockRecorder
}

// MockServiceInterfaceMockRecorder is the mock recorder for MockServiceInterface.
type MockServiceInterfaceMockRecorder struct {
	mock *MockServiceInterface
}

// NewMockServiceInterface creates a new mock instance.
func NewMockServiceInterface(ctrl *gomock.Controller) *MockServiceInterface {
	mock := &MockServiceInterface{ctrl: ctrl}
	mock.recorder = &MockServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceInterface) EXPECT() *MockServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateService mocks base method.
func (m *MockServiceInterface) CreateService(ctx context.Context, service *entity.Service, namespace string) (*entity.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateService", ctx, service, namespace)
	ret0, _ := ret[0].(*entity.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateService indicates an expected call of CreateService.
func (mr *MockServiceInterfaceMockRecorder) CreateService(ctx, service, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateService", reflect.TypeOf((*MockServiceInterface)(nil).CreateService), ctx, service, namespace)
}

// DeleteService mocks base method.
func (m *MockServiceInterface) DeleteService(ctx context.Context, resourceName, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteService", ctx, resourceName, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteService indicates an expected call of DeleteService.
func (mr *MockServiceInterfaceMockRecorder) DeleteService(ctx, resourceName, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteService", reflect.TypeOf((*MockServiceInterface)(nil).DeleteService), ctx, resourceName, namespace)
}

// GetService mocks base method.
func (m *MockServiceInterface) GetService(ctx context.Context, resourceName, namespace string) (*entity.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetService", ctx, resourceName, namespace)
	ret0, _ := ret[0].(*entity.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetService indicates an expected call of GetService.
func (mr *MockServiceInterfaceMockRecorder) GetService(ctx, resourceName, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetService", reflect.TypeOf((*MockServiceInterface)(nil).GetService), ctx, resourceName, namespace)
}

// GetServiceList mocks base method.
func (m *MockServiceInterface) GetServiceList(ctx context.Context, namespace string, filter filter.Meta) ([]entity.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceList", ctx, namespace, filter)
	ret0, _ := ret[0].([]entity.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceList indicates an expected call of GetServiceList.
func (mr *MockServiceInterfaceMockRecorder) GetServiceList(ctx, namespace, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceList", reflect.TypeOf((*MockServiceInterface)(nil).GetServiceList), ctx, namespace, filter)
}

// UpdateOrCreateService mocks base method.
func (m *MockServiceInterface) UpdateOrCreateService(ctx context.Context, service *entity.Service, namespace string) (*entity.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrCreateService", ctx, service, namespace)
	ret0, _ := ret[0].(*entity.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrCreateService indicates an expected call of UpdateOrCreateService.
func (mr *MockServiceInterfaceMockRecorder) UpdateOrCreateService(ctx, service, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrCreateService", reflect.TypeOf((*MockServiceInterface)(nil).UpdateOrCreateService), ctx, service, namespace)
}

// WatchServices mocks base method.
func (m *MockServiceInterface) WatchServices(ctx context.Context, namespace string, filter filter.Meta) (*watch.Handler, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchServices", ctx, namespace, filter)
	ret0, _ := ret[0].(*watch.Handler)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchServices indicates an expected call of WatchServices.
func (mr *MockServiceInterfaceMockRecorder) WatchServices(ctx, namespace, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchServices", reflect.TypeOf((*MockServiceInterface)(nil).WatchServices), ctx, namespace, filter)
}

// MockSecretInterface is a mock of SecretInterface interface.
type MockSecretInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSecretInterfaceMockRecorder
}

// MockSecretInterfaceMockRecorder is the mock recorder for MockSecretInterface.
type MockSecretInterfaceMockRecorder struct {
	mock *MockSecretInterface
}

// NewMockSecretInterface creates a new mock instance.
func NewMockSecretInterface(ctrl *gomock.Controller) *MockSecretInterface {
	mock := &MockSecretInterface{ctrl: ctrl}
	mock.recorder = &MockSecretInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretInterface) EXPECT() *MockSecretInterfaceMockRecorder {
	return m.recorder
}

// CreateSecret mocks base method.
func (m *MockSecretInterface) CreateSecret(ctx context.Context, secret *entity.Secret, namespace string) (*entity.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecret", ctx, secret, namespace)
	ret0, _ := ret[0].(*entity.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecret indicates an expected call of CreateSecret.
func (mr *MockSecretInterfaceMockRecorder) CreateSecret(ctx, secret, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecret", reflect.TypeOf((*MockSecretInterface)(nil).CreateSecret), ctx, secret, namespace)
}

// DeleteSecret mocks base method.
func (m *MockSecretInterface) DeleteSecret(ctx context.Context, resourceName, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecret", ctx, resourceName, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecret indicates an expected call of DeleteSecret.
func (mr *MockSecretInterfaceMockRecorder) DeleteSecret(ctx, resourceName, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecret", reflect.TypeOf((*MockSecretInterface)(nil).DeleteSecret), ctx, resourceName, namespace)
}

// GetOrCreateSecretWithServiceAccountToken mocks base method.
func (m *MockSecretInterface) GetOrCreateSecretWithServiceAccountToken(ctx context.Context, serviceAccountName, namespace string) (*entity.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateSecretWithServiceAccountToken", ctx, serviceAccountName, namespace)
	ret0, _ := ret[0].(*entity.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrCreateSecretWithServiceAccountToken indicates an expected call of GetOrCreateSecretWithServiceAccountToken.
func (mr *MockSecretInterfaceMockRecorder) GetOrCreateSecretWithServiceAccountToken(ctx, serviceAccountName, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateSecretWithServiceAccountToken", reflect.TypeOf((*MockSecretInterface)(nil).GetOrCreateSecretWithServiceAccountToken), ctx, serviceAccountName, namespace)
}

// GetSecret mocks base method.
func (m *MockSecretInterface) GetSecret(ctx context.Context, resourceName, namespace string) (*entity.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecret", ctx, resourceName, namespace)
	ret0, _ := ret[0].(*entity.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecret indicates an expected call of GetSecret.
func (mr *MockSecretInterfaceMockRecorder) GetSecret(ctx, resourceName, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockSecretInterface)(nil).GetSecret), ctx, resourceName, namespace)
}

// GetSecretList mocks base method.
func (m *MockSecretInterface) GetSecretList(ctx context.Context, namespace string, filter filter.Meta) ([]entity.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretList", ctx, namespace, filter)
	ret0, _ := ret[0].([]entity.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretList indicates an expected call of GetSecretList.
func (mr *MockSecretInterfaceMockRecorder) GetSecretList(ctx, namespace, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretList", reflect.TypeOf((*MockSecretInterface)(nil).GetSecretList), ctx, namespace, filter)
}

// UpdateOrCreateSecret mocks base method.
func (m *MockSecretInterface) UpdateOrCreateSecret(ctx context.Context, secret *entity.Secret, namespace string) (*entity.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrCreateSecret", ctx, secret, namespace)
	ret0, _ := ret[0].(*entity.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrCreateSecret indicates an expected call of UpdateOrCreateSecret.
func (mr *MockSecretInterfaceMockRecorder) UpdateOrCreateSecret(ctx, secret, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrCreateSecret", reflect.TypeOf((*MockSecretInterface)(nil).UpdateOrCreateSecret), ctx, secret, namespace)
}

// WatchSecrets mocks base method.
func (m *MockSecretInterface) WatchSecrets(ctx context.Context, namespace string, filter filter.Meta) (*watch.Handler, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchSecrets", ctx, namespace, filter)
	ret0, _ := ret[0].(*watch.Handler)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchSecrets indicates an expected call of WatchSecrets.
func (mr *MockSecretInterfaceMockRecorder) WatchSecrets(ctx, namespace, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchSecrets", reflect.TypeOf((*MockSecretInterface)(nil).WatchSecrets), ctx, namespace, filter)
}

// MockNamespaceInterface is a mock of NamespaceInterface interface.
type MockNamespaceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockNamespaceInterfaceMockRecorder
}

// MockNamespaceInterfaceMockRecorder is the mock recorder for MockNamespaceInterface.
type MockNamespaceInterfaceMockRecorder struct {
	mock *MockNamespaceInterface
}

// NewMockNamespaceInterface creates a new mock instance.
func NewMockNamespaceInterface(ctrl *gomock.Controller) *MockNamespaceInterface {
	mock := &MockNamespaceInterface{ctrl: ctrl}
	mock.recorder = &MockNamespaceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNamespaceInterface) EXPECT() *MockNamespaceInterfaceMockRecorder {
	return m.recorder
}

// GetNamespace mocks base method.
func (m *MockNamespaceInterface) GetNamespace(ctx context.Context, name string) (*entity.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespace", ctx, name)
	ret0, _ := ret[0].(*entity.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamespace indicates an expected call of GetNamespace.
func (mr *MockNamespaceInterfaceMockRecorder) GetNamespace(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespace", reflect.TypeOf((*MockNamespaceInterface)(nil).GetNamespace), ctx, name)
}

// GetNamespaces mocks base method.
func (m *MockNamespaceInterface) GetNamespaces(ctx context.Context, filter filter.Meta) ([]entity.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespaces", ctx, filter)
	ret0, _ := ret[0].([]entity.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamespaces indicates an expected call of GetNamespaces.
func (mr *MockNamespaceInterfaceMockRecorder) GetNamespaces(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespaces", reflect.TypeOf((*MockNamespaceInterface)(nil).GetNamespaces), ctx, filter)
}

// WatchNamespaces mocks base method.
func (m *MockNamespaceInterface) WatchNamespaces(ctx context.Context, namespace string) (*watch.Handler, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchNamespaces", ctx, namespace)
	ret0, _ := ret[0].(*watch.Handler)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchNamespaces indicates an expected call of WatchNamespaces.
func (mr *MockNamespaceInterfaceMockRecorder) WatchNamespaces(ctx, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchNamespaces", reflect.TypeOf((*MockNamespaceInterface)(nil).WatchNamespaces), ctx, namespace)
}

// MockServiceAccountInterface is a mock of ServiceAccountInterface interface.
type MockServiceAccountInterface struct {
	ctrl     *gomock.Controller
	recorder *MockServiceAccountInterfaceMockRecorder
}

// MockServiceAccountInterfaceMockRecorder is the mock recorder for MockServiceAccountInterface.
type MockServiceAccountInterfaceMockRecorder struct {
	mock *MockServiceAccountInterface
}

// NewMockServiceAccountInterface creates a new mock instance.
func NewMockServiceAccountInterface(ctrl *gomock.Controller) *MockServiceAccountInterface {
	mock := &MockServiceAccountInterface{ctrl: ctrl}
	mock.recorder = &MockServiceAccountInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceAccountInterface) EXPECT() *MockServiceAccountInterfaceMockRecorder {
	return m.recorder
}

// CreateServiceAccount mocks base method.
func (m *MockServiceAccountInterface) CreateServiceAccount(ctx context.Context, serviceAccount *entity.ServiceAccount, namespace string) (*entity.ServiceAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServiceAccount", ctx, serviceAccount, namespace)
	ret0, _ := ret[0].(*entity.ServiceAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServiceAccount indicates an expected call of CreateServiceAccount.
func (mr *MockServiceAccountInterfaceMockRecorder) CreateServiceAccount(ctx, serviceAccount, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceAccount", reflect.TypeOf((*MockServiceAccountInterface)(nil).CreateServiceAccount), ctx, serviceAccount, namespace)
}

// DeleteServiceAccount mocks base method.
func (m *MockServiceAccountInterface) DeleteServiceAccount(ctx context.Context, resourceName, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServiceAccount", ctx, resourceName, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServiceAccount indicates an expected call of DeleteServiceAccount.
func (mr *MockServiceAccountInterfaceMockRecorder) DeleteServiceAccount(ctx, resourceName, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceAccount", reflect.TypeOf((*MockServiceAccountInterface)(nil).DeleteServiceAccount), ctx, resourceName, namespace)
}

// GetServiceAccount mocks base method.
func (m *MockServiceAccountInterface) GetServiceAccount(ctx context.Context, resourceName, namespace string) (*entity.ServiceAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceAccount", ctx, resourceName, namespace)
	ret0, _ := ret[0].(*entity.ServiceAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceAccount indicates an expected call of GetServiceAccount.
func (mr *MockServiceAccountInterfaceMockRecorder) GetServiceAccount(ctx, resourceName, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceAccount", reflect.TypeOf((*MockServiceAccountInterface)(nil).GetServiceAccount), ctx, resourceName, namespace)
}

// GetServiceAccountList mocks base method.
func (m *MockServiceAccountInterface) GetServiceAccountList(ctx context.Context, namespace string, filter filter.Meta) ([]entity.ServiceAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceAccountList", ctx, namespace, filter)
	ret0, _ := ret[0].([]entity.ServiceAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceAccountList indicates an expected call of GetServiceAccountList.
func (mr *MockServiceAccountInterfaceMockRecorder) GetServiceAccountList(ctx, namespace, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceAccountList", reflect.TypeOf((*MockServiceAccountInterface)(nil).GetServiceAccountList), ctx, namespace, filter)
}

// WatchServiceAccounts mocks base method.
func (m *MockServiceAccountInterface) WatchServiceAccounts(ctx context.Context, namespace string, filter filter.Meta) (*watch.Handler, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchServiceAccounts", ctx, namespace, filter)
	ret0, _ := ret[0].(*watch.Handler)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchServiceAccounts indicates an expected call of WatchServiceAccounts.
func (mr *MockServiceAccountInterfaceMockRecorder) WatchServiceAccounts(ctx, namespace, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchServiceAccounts", reflect.TypeOf((*MockServiceAccountInterface)(nil).WatchServiceAccounts), ctx, namespace, filter)
}

// MockDeploymentFamilyVersionsInterface is a mock of DeploymentFamilyVersionsInterface interface.
type MockDeploymentFamilyVersionsInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDeploymentFamilyVersionsInterfaceMockRecorder
}

// MockDeploymentFamilyVersionsInterfaceMockRecorder is the mock recorder for MockDeploymentFamilyVersionsInterface.
type MockDeploymentFamilyVersionsInterfaceMockRecorder struct {
	mock *MockDeploymentFamilyVersionsInterface
}

// NewMockDeploymentFamilyVersionsInterface creates a new mock instance.
func NewMockDeploymentFamilyVersionsInterface(ctrl *gomock.Controller) *MockDeploymentFamilyVersionsInterface {
	mock := &MockDeploymentFamilyVersionsInterface{ctrl: ctrl}
	mock.recorder = &MockDeploymentFamilyVersionsInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeploymentFamilyVersionsInterface) EXPECT() *MockDeploymentFamilyVersionsInterfaceMockRecorder {
	return m.recorder
}

// GetDeploymentFamilyVersions mocks base method.
func (m *MockDeploymentFamilyVersionsInterface) GetDeploymentFamilyVersions(ctx context.Context, familyMame, namespace string) ([]entity.DeploymentFamilyVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeploymentFamilyVersions", ctx, familyMame, namespace)
	ret0, _ := ret[0].([]entity.DeploymentFamilyVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeploymentFamilyVersions indicates an expected call of GetDeploymentFamilyVersions.
func (mr *MockDeploymentFamilyVersionsInterfaceMockRecorder) GetDeploymentFamilyVersions(ctx, familyMame, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentFamilyVersions", reflect.TypeOf((*MockDeploymentFamilyVersionsInterface)(nil).GetDeploymentFamilyVersions), ctx, familyMame, namespace)
}

// MockDeploymentInterface is a mock of DeploymentInterface interface.
type MockDeploymentInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDeploymentInterfaceMockRecorder
}

// MockDeploymentInterfaceMockRecorder is the mock recorder for MockDeploymentInterface.
type MockDeploymentInterfaceMockRecorder struct {
	mock *MockDeploymentInterface
}

// NewMockDeploymentInterface creates a new mock instance.
func NewMockDeploymentInterface(ctrl *gomock.Controller) *MockDeploymentInterface {
	mock := &MockDeploymentInterface{ctrl: ctrl}
	mock.recorder = &MockDeploymentInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeploymentInterface) EXPECT() *MockDeploymentInterfaceMockRecorder {
	return m.recorder
}

// GetDeployment mocks base method.
func (m *MockDeploymentInterface) GetDeployment(ctx context.Context, resourceName, namespace string) (*entity.Deployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeployment", ctx, resourceName, namespace)
	ret0, _ := ret[0].(*entity.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeployment indicates an expected call of GetDeployment.
func (mr *MockDeploymentInterfaceMockRecorder) GetDeployment(ctx, resourceName, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeployment", reflect.TypeOf((*MockDeploymentInterface)(nil).GetDeployment), ctx, resourceName, namespace)
}

// GetDeploymentList mocks base method.
func (m *MockDeploymentInterface) GetDeploymentList(ctx context.Context, namespace string, filter filter.Meta) ([]entity.Deployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeploymentList", ctx, namespace, filter)
	ret0, _ := ret[0].([]entity.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeploymentList indicates an expected call of GetDeploymentList.
func (mr *MockDeploymentInterfaceMockRecorder) GetDeploymentList(ctx, namespace, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentList", reflect.TypeOf((*MockDeploymentInterface)(nil).GetDeploymentList), ctx, namespace, filter)
}

// MockCertificateInterface is a mock of CertificateInterface interface.
type MockCertificateInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCertificateInterfaceMockRecorder
}

// MockCertificateInterfaceMockRecorder is the mock recorder for MockCertificateInterface.
type MockCertificateInterfaceMockRecorder struct {
	mock *MockCertificateInterface
}

// NewMockCertificateInterface creates a new mock instance.
func NewMockCertificateInterface(ctrl *gomock.Controller) *MockCertificateInterface {
	mock := &MockCertificateInterface{ctrl: ctrl}
	mock.recorder = &MockCertificateInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCertificateInterface) EXPECT() *MockCertificateInterfaceMockRecorder {
	return m.recorder
}

// CreateCertificate mocks base method.
func (m *MockCertificateInterface) CreateCertificate(ctx context.Context, certificate *entity.Certificate, namespace string) (*entity.Certificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCertificate", ctx, certificate, namespace)
	ret0, _ := ret[0].(*entity.Certificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCertificate indicates an expected call of CreateCertificate.
func (mr *MockCertificateInterfaceMockRecorder) CreateCertificate(ctx, certificate, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCertificate", reflect.TypeOf((*MockCertificateInterface)(nil).CreateCertificate), ctx, certificate, namespace)
}

// DeleteCertificate mocks base method.
func (m *MockCertificateInterface) DeleteCertificate(ctx context.Context, resourceName, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCertificate", ctx, resourceName, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCertificate indicates an expected call of DeleteCertificate.
func (mr *MockCertificateInterfaceMockRecorder) DeleteCertificate(ctx, resourceName, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCertificate", reflect.TypeOf((*MockCertificateInterface)(nil).DeleteCertificate), ctx, resourceName, namespace)
}

// GetCertificate mocks base method.
func (m *MockCertificateInterface) GetCertificate(ctx context.Context, resourceName, namespace string) (*entity.Certificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificate", ctx, resourceName, namespace)
	ret0, _ := ret[0].(*entity.Certificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertificate indicates an expected call of GetCertificate.
func (mr *MockCertificateInterfaceMockRecorder) GetCertificate(ctx, resourceName, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificate", reflect.TypeOf((*MockCertificateInterface)(nil).GetCertificate), ctx, resourceName, namespace)
}

// GetCertificateList mocks base method.
func (m *MockCertificateInterface) GetCertificateList(ctx context.Context, namespace string, filter filter.Meta) ([]entity.Certificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificateList", ctx, namespace, filter)
	ret0, _ := ret[0].([]entity.Certificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertificateList indicates an expected call of GetCertificateList.
func (mr *MockCertificateInterfaceMockRecorder) GetCertificateList(ctx, namespace, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificateList", reflect.TypeOf((*MockCertificateInterface)(nil).GetCertificateList), ctx, namespace, filter)
}

// UpdateOrCreateCertificate mocks base method.
func (m *MockCertificateInterface) UpdateOrCreateCertificate(ctx context.Context, certificate *entity.Certificate, namespace string) (*entity.Certificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrCreateCertificate", ctx, certificate, namespace)
	ret0, _ := ret[0].(*entity.Certificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrCreateCertificate indicates an expected call of UpdateOrCreateCertificate.
func (mr *MockCertificateInterfaceMockRecorder) UpdateOrCreateCertificate(ctx, certificate, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrCreateCertificate", reflect.TypeOf((*MockCertificateInterface)(nil).UpdateOrCreateCertificate), ctx, certificate, namespace)
}

// MockPlatformService is a mock of PlatformService interface.
type MockPlatformService struct {
	ctrl     *gomock.Controller
	recorder *MockPlatformServiceMockRecorder
}

// MockPlatformServiceMockRecorder is the mock recorder for MockPlatformService.
type MockPlatformServiceMockRecorder struct {
	mock *MockPlatformService
}

// NewMockPlatformService creates a new mock instance.
func NewMockPlatformService(ctrl *gomock.Controller) *MockPlatformService {
	mock := &MockPlatformService{ctrl: ctrl}
	mock.recorder = &MockPlatformServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlatformService) EXPECT() *MockPlatformServiceMockRecorder {
	return m.recorder
}

// CreateCertificate mocks base method.
func (m *MockPlatformService) CreateCertificate(ctx context.Context, certificate *entity.Certificate, namespace string) (*entity.Certificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCertificate", ctx, certificate, namespace)
	ret0, _ := ret[0].(*entity.Certificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCertificate indicates an expected call of CreateCertificate.
func (mr *MockPlatformServiceMockRecorder) CreateCertificate(ctx, certificate, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCertificate", reflect.TypeOf((*MockPlatformService)(nil).CreateCertificate), ctx, certificate, namespace)
}

// CreateConfigMap mocks base method.
func (m *MockPlatformService) CreateConfigMap(ctx context.Context, configMap *entity.ConfigMap, namespace string) (*entity.ConfigMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConfigMap", ctx, configMap, namespace)
	ret0, _ := ret[0].(*entity.ConfigMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConfigMap indicates an expected call of CreateConfigMap.
func (mr *MockPlatformServiceMockRecorder) CreateConfigMap(ctx, configMap, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfigMap", reflect.TypeOf((*MockPlatformService)(nil).CreateConfigMap), ctx, configMap, namespace)
}

// CreateRoute mocks base method.
func (m *MockPlatformService) CreateRoute(ctx context.Context, request *entity.Route, namespace string) (*entity.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoute", ctx, request, namespace)
	ret0, _ := ret[0].(*entity.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoute indicates an expected call of CreateRoute.
func (mr *MockPlatformServiceMockRecorder) CreateRoute(ctx, request, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoute", reflect.TypeOf((*MockPlatformService)(nil).CreateRoute), ctx, request, namespace)
}

// CreateSecret mocks base method.
func (m *MockPlatformService) CreateSecret(ctx context.Context, secret *entity.Secret, namespace string) (*entity.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecret", ctx, secret, namespace)
	ret0, _ := ret[0].(*entity.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecret indicates an expected call of CreateSecret.
func (mr *MockPlatformServiceMockRecorder) CreateSecret(ctx, secret, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecret", reflect.TypeOf((*MockPlatformService)(nil).CreateSecret), ctx, secret, namespace)
}

// CreateService mocks base method.
func (m *MockPlatformService) CreateService(ctx context.Context, service *entity.Service, namespace string) (*entity.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateService", ctx, service, namespace)
	ret0, _ := ret[0].(*entity.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateService indicates an expected call of CreateService.
func (mr *MockPlatformServiceMockRecorder) CreateService(ctx, service, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateService", reflect.TypeOf((*MockPlatformService)(nil).CreateService), ctx, service, namespace)
}

// CreateServiceAccount mocks base method.
func (m *MockPlatformService) CreateServiceAccount(ctx context.Context, serviceAccount *entity.ServiceAccount, namespace string) (*entity.ServiceAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServiceAccount", ctx, serviceAccount, namespace)
	ret0, _ := ret[0].(*entity.ServiceAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServiceAccount indicates an expected call of CreateServiceAccount.
func (mr *MockPlatformServiceMockRecorder) CreateServiceAccount(ctx, serviceAccount, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceAccount", reflect.TypeOf((*MockPlatformService)(nil).CreateServiceAccount), ctx, serviceAccount, namespace)
}

// DeleteCertificate mocks base method.
func (m *MockPlatformService) DeleteCertificate(ctx context.Context, resourceName, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCertificate", ctx, resourceName, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCertificate indicates an expected call of DeleteCertificate.
func (mr *MockPlatformServiceMockRecorder) DeleteCertificate(ctx, resourceName, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCertificate", reflect.TypeOf((*MockPlatformService)(nil).DeleteCertificate), ctx, resourceName, namespace)
}

// DeleteConfigMap mocks base method.
func (m *MockPlatformService) DeleteConfigMap(ctx context.Context, resourceName, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConfigMap", ctx, resourceName, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteConfigMap indicates an expected call of DeleteConfigMap.
func (mr *MockPlatformServiceMockRecorder) DeleteConfigMap(ctx, resourceName, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfigMap", reflect.TypeOf((*MockPlatformService)(nil).DeleteConfigMap), ctx, resourceName, namespace)
}

// DeleteRoute mocks base method.
func (m *MockPlatformService) DeleteRoute(ctx context.Context, routeName, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoute", ctx, routeName, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoute indicates an expected call of DeleteRoute.
func (mr *MockPlatformServiceMockRecorder) DeleteRoute(ctx, routeName, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoute", reflect.TypeOf((*MockPlatformService)(nil).DeleteRoute), ctx, routeName, namespace)
}

// DeleteSecret mocks base method.
func (m *MockPlatformService) DeleteSecret(ctx context.Context, resourceName, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecret", ctx, resourceName, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecret indicates an expected call of DeleteSecret.
func (mr *MockPlatformServiceMockRecorder) DeleteSecret(ctx, resourceName, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecret", reflect.TypeOf((*MockPlatformService)(nil).DeleteSecret), ctx, resourceName, namespace)
}

// DeleteService mocks base method.
func (m *MockPlatformService) DeleteService(ctx context.Context, resourceName, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteService", ctx, resourceName, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteService indicates an expected call of DeleteService.
func (mr *MockPlatformServiceMockRecorder) DeleteService(ctx, resourceName, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteService", reflect.TypeOf((*MockPlatformService)(nil).DeleteService), ctx, resourceName, namespace)
}

// DeleteServiceAccount mocks base method.
func (m *MockPlatformService) DeleteServiceAccount(ctx context.Context, resourceName, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServiceAccount", ctx, resourceName, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServiceAccount indicates an expected call of DeleteServiceAccount.
func (mr *MockPlatformServiceMockRecorder) DeleteServiceAccount(ctx, resourceName, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceAccount", reflect.TypeOf((*MockPlatformService)(nil).DeleteServiceAccount), ctx, resourceName, namespace)
}

// GetBadRouteLists mocks base method.
func (m *MockPlatformService) GetBadRouteLists(ctx context.Context) (map[string][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBadRouteLists", ctx)
	ret0, _ := ret[0].(map[string][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBadRouteLists indicates an expected call of GetBadRouteLists.
func (mr *MockPlatformServiceMockRecorder) GetBadRouteLists(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBadRouteLists", reflect.TypeOf((*MockPlatformService)(nil).GetBadRouteLists), ctx)
}

// GetCertificate mocks base method.
func (m *MockPlatformService) GetCertificate(ctx context.Context, resourceName, namespace string) (*entity.Certificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificate", ctx, resourceName, namespace)
	ret0, _ := ret[0].(*entity.Certificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertificate indicates an expected call of GetCertificate.
func (mr *MockPlatformServiceMockRecorder) GetCertificate(ctx, resourceName, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificate", reflect.TypeOf((*MockPlatformService)(nil).GetCertificate), ctx, resourceName, namespace)
}

// GetCertificateList mocks base method.
func (m *MockPlatformService) GetCertificateList(ctx context.Context, namespace string, filter filter.Meta) ([]entity.Certificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificateList", ctx, namespace, filter)
	ret0, _ := ret[0].([]entity.Certificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertificateList indicates an expected call of GetCertificateList.
func (mr *MockPlatformServiceMockRecorder) GetCertificateList(ctx, namespace, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificateList", reflect.TypeOf((*MockPlatformService)(nil).GetCertificateList), ctx, namespace, filter)
}

// GetConfigMap mocks base method.
func (m *MockPlatformService) GetConfigMap(ctx context.Context, resourceName, namespace string) (*entity.ConfigMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigMap", ctx, resourceName, namespace)
	ret0, _ := ret[0].(*entity.ConfigMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigMap indicates an expected call of GetConfigMap.
func (mr *MockPlatformServiceMockRecorder) GetConfigMap(ctx, resourceName, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigMap", reflect.TypeOf((*MockPlatformService)(nil).GetConfigMap), ctx, resourceName, namespace)
}

// GetConfigMapList mocks base method.
func (m *MockPlatformService) GetConfigMapList(ctx context.Context, namespace string, filter filter.Meta) ([]entity.ConfigMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigMapList", ctx, namespace, filter)
	ret0, _ := ret[0].([]entity.ConfigMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigMapList indicates an expected call of GetConfigMapList.
func (mr *MockPlatformServiceMockRecorder) GetConfigMapList(ctx, namespace, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigMapList", reflect.TypeOf((*MockPlatformService)(nil).GetConfigMapList), ctx, namespace, filter)
}

// GetDeployment mocks base method.
func (m *MockPlatformService) GetDeployment(ctx context.Context, resourceName, namespace string) (*entity.Deployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeployment", ctx, resourceName, namespace)
	ret0, _ := ret[0].(*entity.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeployment indicates an expected call of GetDeployment.
func (mr *MockPlatformServiceMockRecorder) GetDeployment(ctx, resourceName, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeployment", reflect.TypeOf((*MockPlatformService)(nil).GetDeployment), ctx, resourceName, namespace)
}

// GetDeploymentFamilyVersions mocks base method.
func (m *MockPlatformService) GetDeploymentFamilyVersions(ctx context.Context, familyMame, namespace string) ([]entity.DeploymentFamilyVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeploymentFamilyVersions", ctx, familyMame, namespace)
	ret0, _ := ret[0].([]entity.DeploymentFamilyVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeploymentFamilyVersions indicates an expected call of GetDeploymentFamilyVersions.
func (mr *MockPlatformServiceMockRecorder) GetDeploymentFamilyVersions(ctx, familyMame, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentFamilyVersions", reflect.TypeOf((*MockPlatformService)(nil).GetDeploymentFamilyVersions), ctx, familyMame, namespace)
}

// GetDeploymentList mocks base method.
func (m *MockPlatformService) GetDeploymentList(ctx context.Context, namespace string, filter filter.Meta) ([]entity.Deployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeploymentList", ctx, namespace, filter)
	ret0, _ := ret[0].([]entity.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeploymentList indicates an expected call of GetDeploymentList.
func (mr *MockPlatformServiceMockRecorder) GetDeploymentList(ctx, namespace, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentList", reflect.TypeOf((*MockPlatformService)(nil).GetDeploymentList), ctx, namespace, filter)
}

// GetNamespace mocks base method.
func (m *MockPlatformService) GetNamespace(ctx context.Context, name string) (*entity.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespace", ctx, name)
	ret0, _ := ret[0].(*entity.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamespace indicates an expected call of GetNamespace.
func (mr *MockPlatformServiceMockRecorder) GetNamespace(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespace", reflect.TypeOf((*MockPlatformService)(nil).GetNamespace), ctx, name)
}

// GetNamespaces mocks base method.
func (m *MockPlatformService) GetNamespaces(ctx context.Context, filter filter.Meta) ([]entity.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespaces", ctx, filter)
	ret0, _ := ret[0].([]entity.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamespaces indicates an expected call of GetNamespaces.
func (mr *MockPlatformServiceMockRecorder) GetNamespaces(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespaces", reflect.TypeOf((*MockPlatformService)(nil).GetNamespaces), ctx, filter)
}

// GetOrCreateSecretWithServiceAccountToken mocks base method.
func (m *MockPlatformService) GetOrCreateSecretWithServiceAccountToken(ctx context.Context, serviceAccountName, namespace string) (*entity.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateSecretWithServiceAccountToken", ctx, serviceAccountName, namespace)
	ret0, _ := ret[0].(*entity.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrCreateSecretWithServiceAccountToken indicates an expected call of GetOrCreateSecretWithServiceAccountToken.
func (mr *MockPlatformServiceMockRecorder) GetOrCreateSecretWithServiceAccountToken(ctx, serviceAccountName, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateSecretWithServiceAccountToken", reflect.TypeOf((*MockPlatformService)(nil).GetOrCreateSecretWithServiceAccountToken), ctx, serviceAccountName, namespace)
}

// GetPod mocks base method.
func (m *MockPlatformService) GetPod(ctx context.Context, resourceName, namespace string) (*entity.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPod", ctx, resourceName, namespace)
	ret0, _ := ret[0].(*entity.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPod indicates an expected call of GetPod.
func (mr *MockPlatformServiceMockRecorder) GetPod(ctx, resourceName, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPod", reflect.TypeOf((*MockPlatformService)(nil).GetPod), ctx, resourceName, namespace)
}

// GetPodList mocks base method.
func (m *MockPlatformService) GetPodList(ctx context.Context, namespace string, filter filter.Meta) ([]entity.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodList", ctx, namespace, filter)
	ret0, _ := ret[0].([]entity.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPodList indicates an expected call of GetPodList.
func (mr *MockPlatformServiceMockRecorder) GetPodList(ctx, namespace, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodList", reflect.TypeOf((*MockPlatformService)(nil).GetPodList), ctx, namespace, filter)
}

// GetRoute mocks base method.
func (m *MockPlatformService) GetRoute(ctx context.Context, resourceName, namespace string) (*entity.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoute", ctx, resourceName, namespace)
	ret0, _ := ret[0].(*entity.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoute indicates an expected call of GetRoute.
func (mr *MockPlatformServiceMockRecorder) GetRoute(ctx, resourceName, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoute", reflect.TypeOf((*MockPlatformService)(nil).GetRoute), ctx, resourceName, namespace)
}

// GetRouteList mocks base method.
func (m *MockPlatformService) GetRouteList(ctx context.Context, namespace string, filter filter.Meta) ([]entity.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouteList", ctx, namespace, filter)
	ret0, _ := ret[0].([]entity.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouteList indicates an expected call of GetRouteList.
func (mr *MockPlatformServiceMockRecorder) GetRouteList(ctx, namespace, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouteList", reflect.TypeOf((*MockPlatformService)(nil).GetRouteList), ctx, namespace, filter)
}

// GetSecret mocks base method.
func (m *MockPlatformService) GetSecret(ctx context.Context, resourceName, namespace string) (*entity.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecret", ctx, resourceName, namespace)
	ret0, _ := ret[0].(*entity.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecret indicates an expected call of GetSecret.
func (mr *MockPlatformServiceMockRecorder) GetSecret(ctx, resourceName, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockPlatformService)(nil).GetSecret), ctx, resourceName, namespace)
}

// GetSecretList mocks base method.
func (m *MockPlatformService) GetSecretList(ctx context.Context, namespace string, filter filter.Meta) ([]entity.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretList", ctx, namespace, filter)
	ret0, _ := ret[0].([]entity.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretList indicates an expected call of GetSecretList.
func (mr *MockPlatformServiceMockRecorder) GetSecretList(ctx, namespace, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretList", reflect.TypeOf((*MockPlatformService)(nil).GetSecretList), ctx, namespace, filter)
}

// GetService mocks base method.
func (m *MockPlatformService) GetService(ctx context.Context, resourceName, namespace string) (*entity.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetService", ctx, resourceName, namespace)
	ret0, _ := ret[0].(*entity.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetService indicates an expected call of GetService.
func (mr *MockPlatformServiceMockRecorder) GetService(ctx, resourceName, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetService", reflect.TypeOf((*MockPlatformService)(nil).GetService), ctx, resourceName, namespace)
}

// GetServiceAccount mocks base method.
func (m *MockPlatformService) GetServiceAccount(ctx context.Context, resourceName, namespace string) (*entity.ServiceAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceAccount", ctx, resourceName, namespace)
	ret0, _ := ret[0].(*entity.ServiceAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceAccount indicates an expected call of GetServiceAccount.
func (mr *MockPlatformServiceMockRecorder) GetServiceAccount(ctx, resourceName, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceAccount", reflect.TypeOf((*MockPlatformService)(nil).GetServiceAccount), ctx, resourceName, namespace)
}

// GetServiceAccountList mocks base method.
func (m *MockPlatformService) GetServiceAccountList(ctx context.Context, namespace string, filter filter.Meta) ([]entity.ServiceAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceAccountList", ctx, namespace, filter)
	ret0, _ := ret[0].([]entity.ServiceAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceAccountList indicates an expected call of GetServiceAccountList.
func (mr *MockPlatformServiceMockRecorder) GetServiceAccountList(ctx, namespace, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceAccountList", reflect.TypeOf((*MockPlatformService)(nil).GetServiceAccountList), ctx, namespace, filter)
}

// GetServiceList mocks base method.
func (m *MockPlatformService) GetServiceList(ctx context.Context, namespace string, filter filter.Meta) ([]entity.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceList", ctx, namespace, filter)
	ret0, _ := ret[0].([]entity.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceList indicates an expected call of GetServiceList.
func (mr *MockPlatformServiceMockRecorder) GetServiceList(ctx, namespace, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceList", reflect.TypeOf((*MockPlatformService)(nil).GetServiceList), ctx, namespace, filter)
}

// RolloutDeployment mocks base method.
func (m *MockPlatformService) RolloutDeployment(ctx context.Context, deploymentName, namespace string) (*entity.DeploymentRollout, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RolloutDeployment", ctx, deploymentName, namespace)
	ret0, _ := ret[0].(*entity.DeploymentRollout)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RolloutDeployment indicates an expected call of RolloutDeployment.
func (mr *MockPlatformServiceMockRecorder) RolloutDeployment(ctx, deploymentName, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RolloutDeployment", reflect.TypeOf((*MockPlatformService)(nil).RolloutDeployment), ctx, deploymentName, namespace)
}

// RolloutDeployments mocks base method.
func (m *MockPlatformService) RolloutDeployments(ctx context.Context, namespace string, deploymentNames []string) (*entity.DeploymentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RolloutDeployments", ctx, namespace, deploymentNames)
	ret0, _ := ret[0].(*entity.DeploymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RolloutDeployments indicates an expected call of RolloutDeployments.
func (mr *MockPlatformServiceMockRecorder) RolloutDeployments(ctx, namespace, deploymentNames interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RolloutDeployments", reflect.TypeOf((*MockPlatformService)(nil).RolloutDeployments), ctx, namespace, deploymentNames)
}

// RolloutDeploymentsInParallel mocks base method.
func (m *MockPlatformService) RolloutDeploymentsInParallel(ctx context.Context, namespace string, deploymentNames []string) (*entity.DeploymentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RolloutDeploymentsInParallel", ctx, namespace, deploymentNames)
	ret0, _ := ret[0].(*entity.DeploymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RolloutDeploymentsInParallel indicates an expected call of RolloutDeploymentsInParallel.
func (mr *MockPlatformServiceMockRecorder) RolloutDeploymentsInParallel(ctx, namespace, deploymentNames interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RolloutDeploymentsInParallel", reflect.TypeOf((*MockPlatformService)(nil).RolloutDeploymentsInParallel), ctx, namespace, deploymentNames)
}

// UpdateOrCreateCertificate mocks base method.
func (m *MockPlatformService) UpdateOrCreateCertificate(ctx context.Context, certificate *entity.Certificate, namespace string) (*entity.Certificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrCreateCertificate", ctx, certificate, namespace)
	ret0, _ := ret[0].(*entity.Certificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrCreateCertificate indicates an expected call of UpdateOrCreateCertificate.
func (mr *MockPlatformServiceMockRecorder) UpdateOrCreateCertificate(ctx, certificate, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrCreateCertificate", reflect.TypeOf((*MockPlatformService)(nil).UpdateOrCreateCertificate), ctx, certificate, namespace)
}

// UpdateOrCreateConfigMap mocks base method.
func (m *MockPlatformService) UpdateOrCreateConfigMap(ctx context.Context, configMap *entity.ConfigMap, namespace string) (*entity.ConfigMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrCreateConfigMap", ctx, configMap, namespace)
	ret0, _ := ret[0].(*entity.ConfigMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrCreateConfigMap indicates an expected call of UpdateOrCreateConfigMap.
func (mr *MockPlatformServiceMockRecorder) UpdateOrCreateConfigMap(ctx, configMap, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrCreateConfigMap", reflect.TypeOf((*MockPlatformService)(nil).UpdateOrCreateConfigMap), ctx, configMap, namespace)
}

// UpdateOrCreateRoute mocks base method.
func (m *MockPlatformService) UpdateOrCreateRoute(ctx context.Context, request *entity.Route, namespace string) (*entity.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrCreateRoute", ctx, request, namespace)
	ret0, _ := ret[0].(*entity.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrCreateRoute indicates an expected call of UpdateOrCreateRoute.
func (mr *MockPlatformServiceMockRecorder) UpdateOrCreateRoute(ctx, request, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrCreateRoute", reflect.TypeOf((*MockPlatformService)(nil).UpdateOrCreateRoute), ctx, request, namespace)
}

// UpdateOrCreateSecret mocks base method.
func (m *MockPlatformService) UpdateOrCreateSecret(ctx context.Context, secret *entity.Secret, namespace string) (*entity.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrCreateSecret", ctx, secret, namespace)
	ret0, _ := ret[0].(*entity.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrCreateSecret indicates an expected call of UpdateOrCreateSecret.
func (mr *MockPlatformServiceMockRecorder) UpdateOrCreateSecret(ctx, secret, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrCreateSecret", reflect.TypeOf((*MockPlatformService)(nil).UpdateOrCreateSecret), ctx, secret, namespace)
}

// UpdateOrCreateService mocks base method.
func (m *MockPlatformService) UpdateOrCreateService(ctx context.Context, service *entity.Service, namespace string) (*entity.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrCreateService", ctx, service, namespace)
	ret0, _ := ret[0].(*entity.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrCreateService indicates an expected call of UpdateOrCreateService.
func (mr *MockPlatformServiceMockRecorder) UpdateOrCreateService(ctx, service, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrCreateService", reflect.TypeOf((*MockPlatformService)(nil).UpdateOrCreateService), ctx, service, namespace)
}

// WatchConfigMaps mocks base method.
func (m *MockPlatformService) WatchConfigMaps(ctx context.Context, namespace string, filter filter.Meta) (*watch.Handler, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchConfigMaps", ctx, namespace, filter)
	ret0, _ := ret[0].(*watch.Handler)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchConfigMaps indicates an expected call of WatchConfigMaps.
func (mr *MockPlatformServiceMockRecorder) WatchConfigMaps(ctx, namespace, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchConfigMaps", reflect.TypeOf((*MockPlatformService)(nil).WatchConfigMaps), ctx, namespace, filter)
}

// WatchNamespaces mocks base method.
func (m *MockPlatformService) WatchNamespaces(ctx context.Context, namespace string) (*watch.Handler, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchNamespaces", ctx, namespace)
	ret0, _ := ret[0].(*watch.Handler)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchNamespaces indicates an expected call of WatchNamespaces.
func (mr *MockPlatformServiceMockRecorder) WatchNamespaces(ctx, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchNamespaces", reflect.TypeOf((*MockPlatformService)(nil).WatchNamespaces), ctx, namespace)
}

// WatchPodsRestarting mocks base method.
func (m *MockPlatformService) WatchPodsRestarting(ctx context.Context, namespace string, filter filter.Meta, deploymentsMap map[string][]string) (*watch.Handler, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchPodsRestarting", ctx, namespace, filter, deploymentsMap)
	ret0, _ := ret[0].(*watch.Handler)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchPodsRestarting indicates an expected call of WatchPodsRestarting.
func (mr *MockPlatformServiceMockRecorder) WatchPodsRestarting(ctx, namespace, filter, deploymentsMap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchPodsRestarting", reflect.TypeOf((*MockPlatformService)(nil).WatchPodsRestarting), ctx, namespace, filter, deploymentsMap)
}

// WatchRoutes mocks base method.
func (m *MockPlatformService) WatchRoutes(ctx context.Context, namespace string, filter filter.Meta) (*watch.Handler, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchRoutes", ctx, namespace, filter)
	ret0, _ := ret[0].(*watch.Handler)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchRoutes indicates an expected call of WatchRoutes.
func (mr *MockPlatformServiceMockRecorder) WatchRoutes(ctx, namespace, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchRoutes", reflect.TypeOf((*MockPlatformService)(nil).WatchRoutes), ctx, namespace, filter)
}

// WatchSecrets mocks base method.
func (m *MockPlatformService) WatchSecrets(ctx context.Context, namespace string, filter filter.Meta) (*watch.Handler, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchSecrets", ctx, namespace, filter)
	ret0, _ := ret[0].(*watch.Handler)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchSecrets indicates an expected call of WatchSecrets.
func (mr *MockPlatformServiceMockRecorder) WatchSecrets(ctx, namespace, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchSecrets", reflect.TypeOf((*MockPlatformService)(nil).WatchSecrets), ctx, namespace, filter)
}

// WatchServiceAccounts mocks base method.
func (m *MockPlatformService) WatchServiceAccounts(ctx context.Context, namespace string, filter filter.Meta) (*watch.Handler, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchServiceAccounts", ctx, namespace, filter)
	ret0, _ := ret[0].(*watch.Handler)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchServiceAccounts indicates an expected call of WatchServiceAccounts.
func (mr *MockPlatformServiceMockRecorder) WatchServiceAccounts(ctx, namespace, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchServiceAccounts", reflect.TypeOf((*MockPlatformService)(nil).WatchServiceAccounts), ctx, namespace, filter)
}

// WatchServices mocks base method.
func (m *MockPlatformService) WatchServices(ctx context.Context, namespace string, filter filter.Meta) (*watch.Handler, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchServices", ctx, namespace, filter)
	ret0, _ := ret[0].(*watch.Handler)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchServices indicates an expected call of WatchServices.
func (mr *MockPlatformServiceMockRecorder) WatchServices(ctx, namespace, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchServices", reflect.TypeOf((*MockPlatformService)(nil).WatchServices), ctx, namespace, filter)
}
