// Code generated by MockGen. DO NOT EDIT.
// Source: executor.go

// Package watch is a generated GoMock package.
package watch

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/vlla-test-organization/qubership-core-lib-go-paas-mediation-client/v8/types"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// MockExecutor is a mock of Executor interface.
type MockExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockExecutorMockRecorder
}

// MockExecutorMockRecorder is the mock recorder for MockExecutor.
type MockExecutorMockRecorder struct {
	mock *MockExecutor
}

// NewMockExecutor creates a new mock instance.
func NewMockExecutor(ctrl *gomock.Controller) *MockExecutor {
	mock := &MockExecutor{ctrl: ctrl}
	mock.recorder = &MockExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecutor) EXPECT() *MockExecutorMockRecorder {
	return m.recorder
}

// CreateWatchRequest mocks base method.
func (m *MockExecutor) CreateWatchRequest(restClient rest.Interface, resource types.PaasResourceType, options *v1.ListOptions) *rest.Request {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWatchRequest", restClient, resource, options)
	ret0, _ := ret[0].(*rest.Request)
	return ret0
}

// CreateWatchRequest indicates an expected call of CreateWatchRequest.
func (mr *MockExecutorMockRecorder) CreateWatchRequest(restClient, resource, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWatchRequest", reflect.TypeOf((*MockExecutor)(nil).CreateWatchRequest), restClient, resource, options)
}

// Watch mocks base method.
func (m *MockExecutor) Watch(ctx context.Context, watchRequest *rest.Request) (watch.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", ctx, watchRequest)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockExecutorMockRecorder) Watch(ctx, watchRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockExecutor)(nil).Watch), ctx, watchRequest)
}
